import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.Test;

public class SolveOcrTest {
	@Test
	public void testDivideNinePeacesNull() {
		String[] ocrLines = ReaderOcr.readOcrFromFile();
		String[] peaces = SolveOcr.divideNinePeaces(ocrLines[0]);
		assertNotNull(peaces);
	}

	@Test
	public void testDivideNinePeacesSize() {
		String[] ocrLines = ReaderOcr.readOcrFromFile();
		String[] peaces = SolveOcr.divideNinePeaces(ocrLines[0]);

		assertTrue(peaces.length == 9);

	}

	@Test
	public void testDivideNinePeaces() {
		String[] ocrLines = ReaderOcr.readOcrFromFile();
		String[] peaces = SolveOcr.divideNinePeaces(ocrLines[0]);
		for (String s : peaces) {
			assertTrue(s.length() == 3);
		}
	}

	@Test
	public void testCutMethodWithOneUnderlineOnTheFirstLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn," _ ",1);
		assertMatchNumbers(createList(0,2,3,5,6,7,8,9), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithThreeSpacesOnTheFirstLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"   ",1);
		assertMatchNumbers(createList(1,4), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithTwoSpacesAndPipeOnTheSecondLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"  |",2);
		assertMatchNumbers(createList(1,7), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithOneSpacesUndelineAndPipeOnTheSecondLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn," _|",2);
		assertMatchNumbers(createList(2,3), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithPipeUndelineAndPipeOnTheSecondLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"|_|",2);
		assertMatchNumbers(createList(4,8,9), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithPipeUndelineAndOneSpaceOnTheSecondLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"|_ ",2);
		assertMatchNumbers(createList(5,6), pn.getListNumbers());
	}
////////////ThirdLine
	@Test
	public void testCutMethodWithTwoSpacesAndPipeOnTheThirdLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"  |",2);
		assertMatchNumbers(createList(1,7), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithOneSpacesUndelineAndPipeOnTheThirdLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn," _|",2);
		assertMatchNumbers(createList(2,3), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithPipeUndelineAndPipeOnTheThirdLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"|_|",2);
		assertMatchNumbers(createList(4,8,9), pn.getListNumbers());
	}
	@Test
	public void testCutMethodWithPipeUndelineAndOneSpaceOnTheThirdLine(){
		PossibleNumbers pn = PossibleNumbersFactory.getInstance();
		SolveOcr.cut(pn,"|_ ",2);
		assertMatchNumbers(createList(5,6), pn.getListNumbers());
	}

	private List<Integer> createList(Integer... integers) {
		List<Integer> list = Arrays.asList(integers);
		Collections.sort(list);
		return list;
	}

	private void assertMatchNumbers(List<Integer> exp, List<Integer> res) {
		assertTrue(exp.size() == res.size());
		for (int i = 0; i < exp.size(); i++) {
			assertTrue(exp.get(i) == res.get(i));
		}

	}

}
